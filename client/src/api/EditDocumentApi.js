/**
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AppendXlsxRowRequest', 'model/AppendXlsxRowResponse', 'model/ClearXlsxCellRequest', 'model/ClearXlsxCellResponse', 'model/ClearXlsxRowRequest', 'model/ClearXlsxRowResponse', 'model/CreateBlankDocxRequest', 'model/CreateBlankDocxResponse', 'model/CreateBlankSpreadsheetRequest', 'model/CreateBlankSpreadsheetResponse', 'model/CreateSpreadsheetFromDataRequest', 'model/CreateSpreadsheetFromDataResponse', 'model/DeleteDocxTableRowRangeRequest', 'model/DeleteDocxTableRowRangeResponse', 'model/DeleteDocxTableRowRequest', 'model/DeleteDocxTableRowResponse', 'model/DisableSharedWorkbookRequest', 'model/DisableSharedWorkbookResponse', 'model/DocxInsertCommentOnParagraphRequest', 'model/DocxInsertImageRequest', 'model/DocxInsertImageResponse', 'model/DocxRemoveObjectRequest', 'model/DocxRemoveObjectResponse', 'model/DocxSetCustomMetadataPropertiesRequest', 'model/DocxSetFooterAddPageNumberRequest', 'model/DocxSetFooterRequest', 'model/DocxSetFooterResponse', 'model/DocxSetHeaderRequest', 'model/DocxSetHeaderResponse', 'model/EnableSharedWorkbookRequest', 'model/EnableSharedWorkbookResponse', 'model/FindDocxParagraphRequest', 'model/FindDocxParagraphResponse', 'model/FinishEditingRequest', 'model/GetDocxBodyRequest', 'model/GetDocxBodyResponse', 'model/GetDocxCommentsHierarchicalResponse', 'model/GetDocxCommentsResponse', 'model/GetDocxGetCommentsHierarchicalRequest', 'model/GetDocxGetCommentsRequest', 'model/GetDocxHeadersAndFootersRequest', 'model/GetDocxHeadersAndFootersResponse', 'model/GetDocxImagesRequest', 'model/GetDocxImagesResponse', 'model/GetDocxMetadataPropertiesResponse', 'model/GetDocxPagesRequest', 'model/GetDocxPagesResponse', 'model/GetDocxSectionsRequest', 'model/GetDocxSectionsResponse', 'model/GetDocxStylesRequest', 'model/GetDocxStylesResponse', 'model/GetDocxTableByIndexRequest', 'model/GetDocxTableByIndexResponse', 'model/GetDocxTableRowRequest', 'model/GetDocxTableRowResponse', 'model/GetDocxTablesRequest', 'model/GetDocxTablesResponse', 'model/GetMacrosResponse', 'model/GetXlsxCellByIdentifierRequest', 'model/GetXlsxCellByIdentifierResponse', 'model/GetXlsxCellRequest', 'model/GetXlsxCellResponse', 'model/GetXlsxColumnsRequest', 'model/GetXlsxColumnsResponse', 'model/GetXlsxImagesRequest', 'model/GetXlsxImagesResponse', 'model/GetXlsxRowsAndCellsRequest', 'model/GetXlsxRowsAndCellsResponse', 'model/GetXlsxSpecificRowRequest', 'model/GetXlsxSpecificRowResponse', 'model/GetXlsxStylesRequest', 'model/GetXlsxStylesResponse', 'model/GetXlsxWorksheetsRequest', 'model/GetXlsxWorksheetsResponse', 'model/InsertDocxCommentOnParagraphResponse', 'model/InsertDocxInsertParagraphRequest', 'model/InsertDocxInsertParagraphResponse', 'model/InsertDocxTableRowRequest', 'model/InsertDocxTableRowResponse', 'model/InsertDocxTablesRequest', 'model/InsertDocxTablesResponse', 'model/InsertXlsxWorksheetRequest', 'model/InsertXlsxWorksheetResponse', 'model/MultiReplaceStringRequest', 'model/RemoveDocxHeadersAndFootersRequest', 'model/RemoveDocxHeadersAndFootersResponse', 'model/RemoveDocxPagesRequest', 'model/RemovePptxSlidesRequest', 'model/RemoveXlsxWorksheetRequest', 'model/RenameXlsxWorksheetRequest', 'model/RenameXlsxWorksheetResponse', 'model/ReplaceDocxParagraphRequest', 'model/ReplaceDocxParagraphResponse', 'model/ReplaceStringRequest', 'model/SetXlsxCellByIdentifierRequest', 'model/SetXlsxCellByIdentifierResponse', 'model/SetXlsxCellRequest', 'model/SetXlsxCellResponse', 'model/UpdateDocxTableCellRequest', 'model/UpdateDocxTableCellResponse', 'model/UpdateDocxTableRowRequest', 'model/UpdateDocxTableRowResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AppendXlsxRowRequest'), require('../model/AppendXlsxRowResponse'), require('../model/ClearXlsxCellRequest'), require('../model/ClearXlsxCellResponse'), require('../model/ClearXlsxRowRequest'), require('../model/ClearXlsxRowResponse'), require('../model/CreateBlankDocxRequest'), require('../model/CreateBlankDocxResponse'), require('../model/CreateBlankSpreadsheetRequest'), require('../model/CreateBlankSpreadsheetResponse'), require('../model/CreateSpreadsheetFromDataRequest'), require('../model/CreateSpreadsheetFromDataResponse'), require('../model/DeleteDocxTableRowRangeRequest'), require('../model/DeleteDocxTableRowRangeResponse'), require('../model/DeleteDocxTableRowRequest'), require('../model/DeleteDocxTableRowResponse'), require('../model/DisableSharedWorkbookRequest'), require('../model/DisableSharedWorkbookResponse'), require('../model/DocxInsertCommentOnParagraphRequest'), require('../model/DocxInsertImageRequest'), require('../model/DocxInsertImageResponse'), require('../model/DocxRemoveObjectRequest'), require('../model/DocxRemoveObjectResponse'), require('../model/DocxSetCustomMetadataPropertiesRequest'), require('../model/DocxSetFooterAddPageNumberRequest'), require('../model/DocxSetFooterRequest'), require('../model/DocxSetFooterResponse'), require('../model/DocxSetHeaderRequest'), require('../model/DocxSetHeaderResponse'), require('../model/EnableSharedWorkbookRequest'), require('../model/EnableSharedWorkbookResponse'), require('../model/FindDocxParagraphRequest'), require('../model/FindDocxParagraphResponse'), require('../model/FinishEditingRequest'), require('../model/GetDocxBodyRequest'), require('../model/GetDocxBodyResponse'), require('../model/GetDocxCommentsHierarchicalResponse'), require('../model/GetDocxCommentsResponse'), require('../model/GetDocxGetCommentsHierarchicalRequest'), require('../model/GetDocxGetCommentsRequest'), require('../model/GetDocxHeadersAndFootersRequest'), require('../model/GetDocxHeadersAndFootersResponse'), require('../model/GetDocxImagesRequest'), require('../model/GetDocxImagesResponse'), require('../model/GetDocxMetadataPropertiesResponse'), require('../model/GetDocxPagesRequest'), require('../model/GetDocxPagesResponse'), require('../model/GetDocxSectionsRequest'), require('../model/GetDocxSectionsResponse'), require('../model/GetDocxStylesRequest'), require('../model/GetDocxStylesResponse'), require('../model/GetDocxTableByIndexRequest'), require('../model/GetDocxTableByIndexResponse'), require('../model/GetDocxTableRowRequest'), require('../model/GetDocxTableRowResponse'), require('../model/GetDocxTablesRequest'), require('../model/GetDocxTablesResponse'), require('../model/GetMacrosResponse'), require('../model/GetXlsxCellByIdentifierRequest'), require('../model/GetXlsxCellByIdentifierResponse'), require('../model/GetXlsxCellRequest'), require('../model/GetXlsxCellResponse'), require('../model/GetXlsxColumnsRequest'), require('../model/GetXlsxColumnsResponse'), require('../model/GetXlsxImagesRequest'), require('../model/GetXlsxImagesResponse'), require('../model/GetXlsxRowsAndCellsRequest'), require('../model/GetXlsxRowsAndCellsResponse'), require('../model/GetXlsxSpecificRowRequest'), require('../model/GetXlsxSpecificRowResponse'), require('../model/GetXlsxStylesRequest'), require('../model/GetXlsxStylesResponse'), require('../model/GetXlsxWorksheetsRequest'), require('../model/GetXlsxWorksheetsResponse'), require('../model/InsertDocxCommentOnParagraphResponse'), require('../model/InsertDocxInsertParagraphRequest'), require('../model/InsertDocxInsertParagraphResponse'), require('../model/InsertDocxTableRowRequest'), require('../model/InsertDocxTableRowResponse'), require('../model/InsertDocxTablesRequest'), require('../model/InsertDocxTablesResponse'), require('../model/InsertXlsxWorksheetRequest'), require('../model/InsertXlsxWorksheetResponse'), require('../model/MultiReplaceStringRequest'), require('../model/RemoveDocxHeadersAndFootersRequest'), require('../model/RemoveDocxHeadersAndFootersResponse'), require('../model/RemoveDocxPagesRequest'), require('../model/RemovePptxSlidesRequest'), require('../model/RemoveXlsxWorksheetRequest'), require('../model/RenameXlsxWorksheetRequest'), require('../model/RenameXlsxWorksheetResponse'), require('../model/ReplaceDocxParagraphRequest'), require('../model/ReplaceDocxParagraphResponse'), require('../model/ReplaceStringRequest'), require('../model/SetXlsxCellByIdentifierRequest'), require('../model/SetXlsxCellByIdentifierResponse'), require('../model/SetXlsxCellRequest'), require('../model/SetXlsxCellResponse'), require('../model/UpdateDocxTableCellRequest'), require('../model/UpdateDocxTableCellResponse'), require('../model/UpdateDocxTableRowRequest'), require('../model/UpdateDocxTableRowResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveConvertApiClient) {
      root.CloudmersiveConvertApiClient = {};
    }
    root.CloudmersiveConvertApiClient.EditDocumentApi = factory(root.CloudmersiveConvertApiClient.ApiClient, root.CloudmersiveConvertApiClient.AppendXlsxRowRequest, root.CloudmersiveConvertApiClient.AppendXlsxRowResponse, root.CloudmersiveConvertApiClient.ClearXlsxCellRequest, root.CloudmersiveConvertApiClient.ClearXlsxCellResponse, root.CloudmersiveConvertApiClient.ClearXlsxRowRequest, root.CloudmersiveConvertApiClient.ClearXlsxRowResponse, root.CloudmersiveConvertApiClient.CreateBlankDocxRequest, root.CloudmersiveConvertApiClient.CreateBlankDocxResponse, root.CloudmersiveConvertApiClient.CreateBlankSpreadsheetRequest, root.CloudmersiveConvertApiClient.CreateBlankSpreadsheetResponse, root.CloudmersiveConvertApiClient.CreateSpreadsheetFromDataRequest, root.CloudmersiveConvertApiClient.CreateSpreadsheetFromDataResponse, root.CloudmersiveConvertApiClient.DeleteDocxTableRowRangeRequest, root.CloudmersiveConvertApiClient.DeleteDocxTableRowRangeResponse, root.CloudmersiveConvertApiClient.DeleteDocxTableRowRequest, root.CloudmersiveConvertApiClient.DeleteDocxTableRowResponse, root.CloudmersiveConvertApiClient.DisableSharedWorkbookRequest, root.CloudmersiveConvertApiClient.DisableSharedWorkbookResponse, root.CloudmersiveConvertApiClient.DocxInsertCommentOnParagraphRequest, root.CloudmersiveConvertApiClient.DocxInsertImageRequest, root.CloudmersiveConvertApiClient.DocxInsertImageResponse, root.CloudmersiveConvertApiClient.DocxRemoveObjectRequest, root.CloudmersiveConvertApiClient.DocxRemoveObjectResponse, root.CloudmersiveConvertApiClient.DocxSetCustomMetadataPropertiesRequest, root.CloudmersiveConvertApiClient.DocxSetFooterAddPageNumberRequest, root.CloudmersiveConvertApiClient.DocxSetFooterRequest, root.CloudmersiveConvertApiClient.DocxSetFooterResponse, root.CloudmersiveConvertApiClient.DocxSetHeaderRequest, root.CloudmersiveConvertApiClient.DocxSetHeaderResponse, root.CloudmersiveConvertApiClient.EnableSharedWorkbookRequest, root.CloudmersiveConvertApiClient.EnableSharedWorkbookResponse, root.CloudmersiveConvertApiClient.FindDocxParagraphRequest, root.CloudmersiveConvertApiClient.FindDocxParagraphResponse, root.CloudmersiveConvertApiClient.FinishEditingRequest, root.CloudmersiveConvertApiClient.GetDocxBodyRequest, root.CloudmersiveConvertApiClient.GetDocxBodyResponse, root.CloudmersiveConvertApiClient.GetDocxCommentsHierarchicalResponse, root.CloudmersiveConvertApiClient.GetDocxCommentsResponse, root.CloudmersiveConvertApiClient.GetDocxGetCommentsHierarchicalRequest, root.CloudmersiveConvertApiClient.GetDocxGetCommentsRequest, root.CloudmersiveConvertApiClient.GetDocxHeadersAndFootersRequest, root.CloudmersiveConvertApiClient.GetDocxHeadersAndFootersResponse, root.CloudmersiveConvertApiClient.GetDocxImagesRequest, root.CloudmersiveConvertApiClient.GetDocxImagesResponse, root.CloudmersiveConvertApiClient.GetDocxMetadataPropertiesResponse, root.CloudmersiveConvertApiClient.GetDocxPagesRequest, root.CloudmersiveConvertApiClient.GetDocxPagesResponse, root.CloudmersiveConvertApiClient.GetDocxSectionsRequest, root.CloudmersiveConvertApiClient.GetDocxSectionsResponse, root.CloudmersiveConvertApiClient.GetDocxStylesRequest, root.CloudmersiveConvertApiClient.GetDocxStylesResponse, root.CloudmersiveConvertApiClient.GetDocxTableByIndexRequest, root.CloudmersiveConvertApiClient.GetDocxTableByIndexResponse, root.CloudmersiveConvertApiClient.GetDocxTableRowRequest, root.CloudmersiveConvertApiClient.GetDocxTableRowResponse, root.CloudmersiveConvertApiClient.GetDocxTablesRequest, root.CloudmersiveConvertApiClient.GetDocxTablesResponse, root.CloudmersiveConvertApiClient.GetMacrosResponse, root.CloudmersiveConvertApiClient.GetXlsxCellByIdentifierRequest, root.CloudmersiveConvertApiClient.GetXlsxCellByIdentifierResponse, root.CloudmersiveConvertApiClient.GetXlsxCellRequest, root.CloudmersiveConvertApiClient.GetXlsxCellResponse, root.CloudmersiveConvertApiClient.GetXlsxColumnsRequest, root.CloudmersiveConvertApiClient.GetXlsxColumnsResponse, root.CloudmersiveConvertApiClient.GetXlsxImagesRequest, root.CloudmersiveConvertApiClient.GetXlsxImagesResponse, root.CloudmersiveConvertApiClient.GetXlsxRowsAndCellsRequest, root.CloudmersiveConvertApiClient.GetXlsxRowsAndCellsResponse, root.CloudmersiveConvertApiClient.GetXlsxSpecificRowRequest, root.CloudmersiveConvertApiClient.GetXlsxSpecificRowResponse, root.CloudmersiveConvertApiClient.GetXlsxStylesRequest, root.CloudmersiveConvertApiClient.GetXlsxStylesResponse, root.CloudmersiveConvertApiClient.GetXlsxWorksheetsRequest, root.CloudmersiveConvertApiClient.GetXlsxWorksheetsResponse, root.CloudmersiveConvertApiClient.InsertDocxCommentOnParagraphResponse, root.CloudmersiveConvertApiClient.InsertDocxInsertParagraphRequest, root.CloudmersiveConvertApiClient.InsertDocxInsertParagraphResponse, root.CloudmersiveConvertApiClient.InsertDocxTableRowRequest, root.CloudmersiveConvertApiClient.InsertDocxTableRowResponse, root.CloudmersiveConvertApiClient.InsertDocxTablesRequest, root.CloudmersiveConvertApiClient.InsertDocxTablesResponse, root.CloudmersiveConvertApiClient.InsertXlsxWorksheetRequest, root.CloudmersiveConvertApiClient.InsertXlsxWorksheetResponse, root.CloudmersiveConvertApiClient.MultiReplaceStringRequest, root.CloudmersiveConvertApiClient.RemoveDocxHeadersAndFootersRequest, root.CloudmersiveConvertApiClient.RemoveDocxHeadersAndFootersResponse, root.CloudmersiveConvertApiClient.RemoveDocxPagesRequest, root.CloudmersiveConvertApiClient.RemovePptxSlidesRequest, root.CloudmersiveConvertApiClient.RemoveXlsxWorksheetRequest, root.CloudmersiveConvertApiClient.RenameXlsxWorksheetRequest, root.CloudmersiveConvertApiClient.RenameXlsxWorksheetResponse, root.CloudmersiveConvertApiClient.ReplaceDocxParagraphRequest, root.CloudmersiveConvertApiClient.ReplaceDocxParagraphResponse, root.CloudmersiveConvertApiClient.ReplaceStringRequest, root.CloudmersiveConvertApiClient.SetXlsxCellByIdentifierRequest, root.CloudmersiveConvertApiClient.SetXlsxCellByIdentifierResponse, root.CloudmersiveConvertApiClient.SetXlsxCellRequest, root.CloudmersiveConvertApiClient.SetXlsxCellResponse, root.CloudmersiveConvertApiClient.UpdateDocxTableCellRequest, root.CloudmersiveConvertApiClient.UpdateDocxTableCellResponse, root.CloudmersiveConvertApiClient.UpdateDocxTableRowRequest, root.CloudmersiveConvertApiClient.UpdateDocxTableRowResponse);
  }
}(this, function(ApiClient, AppendXlsxRowRequest, AppendXlsxRowResponse, ClearXlsxCellRequest, ClearXlsxCellResponse, ClearXlsxRowRequest, ClearXlsxRowResponse, CreateBlankDocxRequest, CreateBlankDocxResponse, CreateBlankSpreadsheetRequest, CreateBlankSpreadsheetResponse, CreateSpreadsheetFromDataRequest, CreateSpreadsheetFromDataResponse, DeleteDocxTableRowRangeRequest, DeleteDocxTableRowRangeResponse, DeleteDocxTableRowRequest, DeleteDocxTableRowResponse, DisableSharedWorkbookRequest, DisableSharedWorkbookResponse, DocxInsertCommentOnParagraphRequest, DocxInsertImageRequest, DocxInsertImageResponse, DocxRemoveObjectRequest, DocxRemoveObjectResponse, DocxSetCustomMetadataPropertiesRequest, DocxSetFooterAddPageNumberRequest, DocxSetFooterRequest, DocxSetFooterResponse, DocxSetHeaderRequest, DocxSetHeaderResponse, EnableSharedWorkbookRequest, EnableSharedWorkbookResponse, FindDocxParagraphRequest, FindDocxParagraphResponse, FinishEditingRequest, GetDocxBodyRequest, GetDocxBodyResponse, GetDocxCommentsHierarchicalResponse, GetDocxCommentsResponse, GetDocxGetCommentsHierarchicalRequest, GetDocxGetCommentsRequest, GetDocxHeadersAndFootersRequest, GetDocxHeadersAndFootersResponse, GetDocxImagesRequest, GetDocxImagesResponse, GetDocxMetadataPropertiesResponse, GetDocxPagesRequest, GetDocxPagesResponse, GetDocxSectionsRequest, GetDocxSectionsResponse, GetDocxStylesRequest, GetDocxStylesResponse, GetDocxTableByIndexRequest, GetDocxTableByIndexResponse, GetDocxTableRowRequest, GetDocxTableRowResponse, GetDocxTablesRequest, GetDocxTablesResponse, GetMacrosResponse, GetXlsxCellByIdentifierRequest, GetXlsxCellByIdentifierResponse, GetXlsxCellRequest, GetXlsxCellResponse, GetXlsxColumnsRequest, GetXlsxColumnsResponse, GetXlsxImagesRequest, GetXlsxImagesResponse, GetXlsxRowsAndCellsRequest, GetXlsxRowsAndCellsResponse, GetXlsxSpecificRowRequest, GetXlsxSpecificRowResponse, GetXlsxStylesRequest, GetXlsxStylesResponse, GetXlsxWorksheetsRequest, GetXlsxWorksheetsResponse, InsertDocxCommentOnParagraphResponse, InsertDocxInsertParagraphRequest, InsertDocxInsertParagraphResponse, InsertDocxTableRowRequest, InsertDocxTableRowResponse, InsertDocxTablesRequest, InsertDocxTablesResponse, InsertXlsxWorksheetRequest, InsertXlsxWorksheetResponse, MultiReplaceStringRequest, RemoveDocxHeadersAndFootersRequest, RemoveDocxHeadersAndFootersResponse, RemoveDocxPagesRequest, RemovePptxSlidesRequest, RemoveXlsxWorksheetRequest, RenameXlsxWorksheetRequest, RenameXlsxWorksheetResponse, ReplaceDocxParagraphRequest, ReplaceDocxParagraphResponse, ReplaceStringRequest, SetXlsxCellByIdentifierRequest, SetXlsxCellByIdentifierResponse, SetXlsxCellRequest, SetXlsxCellResponse, UpdateDocxTableCellRequest, UpdateDocxTableCellResponse, UpdateDocxTableRowRequest, UpdateDocxTableRowResponse) {
  'use strict';

  /**
   * EditDocument service.
   * @module api/EditDocumentApi
   * @version 2.6.5
   */

  /**
   * Constructs a new EditDocumentApi. 
   * @alias module:api/EditDocumentApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the editDocumentBeginEditing operation.
     * @callback module:api/EditDocumentApi~editDocumentBeginEditingCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Begin editing a document
     * Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {module:api/EditDocumentApi~editDocumentBeginEditingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.editDocumentBeginEditing = function(inputFile, callback) {
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling editDocumentBeginEditing");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/convert/edit/begin-editing', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxAcceptAllTrackChanges operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxAcceptAllTrackChangesCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept all tracked changes, revisions in a Word DOCX document
     * Accepts all tracked changes and revisions in a Word DOCX document.  This will accept all pending changes in the document when tracked changes is turned on.  Track changes will remain on (if it is on) after this oepration is completed.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {module:api/EditDocumentApi~editDocumentDocxAcceptAllTrackChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editDocumentDocxAcceptAllTrackChanges = function(inputFile, callback) {
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling editDocumentDocxAcceptAllTrackChanges");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/docx/track-changes/accept-all', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxBody operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxBodyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDocxBodyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get body from a Word DOCX document
     * Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document
     * @param {module:model/GetDocxBodyRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxBodyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDocxBodyResponse}
     */
    this.editDocumentDocxBody = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxBody");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetDocxBodyResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/get-body', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxCreateBlankDocument operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxCreateBlankDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBlankDocxResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a blank Word DOCX document
     * Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.
     * @param {module:model/CreateBlankDocxRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxCreateBlankDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBlankDocxResponse}
     */
    this.editDocumentDocxCreateBlankDocument = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentDocxCreateBlankDocument");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CreateBlankDocxResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/create/blank', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxDeletePages operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxDeletePagesCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete, remove pages from a Word DOCX document
     * Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed
     * @param {module:model/RemoveDocxPagesRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxDeletePagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editDocumentDocxDeletePages = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxDeletePages");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/docx/delete-pages', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxDeleteTableRow operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxDeleteTableRowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDocxTableRowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a table row in an existing table in a Word DOCX document
     * Deletes an existing table row in a Word DOCX Document and returns the result.
     * @param {module:model/DeleteDocxTableRowRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxDeleteTableRowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDocxTableRowResponse}
     */
    this.editDocumentDocxDeleteTableRow = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxDeleteTableRow");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DeleteDocxTableRowResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/delete-table-row', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxDeleteTableRowRange operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxDeleteTableRowRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDocxTableRowRangeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a range of multiple table rows in an existing table in a Word DOCX document
     * Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.
     * @param {module:model/DeleteDocxTableRowRangeRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxDeleteTableRowRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDocxTableRowRangeResponse}
     */
    this.editDocumentDocxDeleteTableRowRange = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxDeleteTableRowRange");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DeleteDocxTableRowRangeResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/delete-table-row/range', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxDisableTrackChanges operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxDisableTrackChangesCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable track changes, revisions in a Word DOCX document
     * Diables tracking of changes and revisions in a Word DOCX document, and accepts any pending changes.  Users editing the document will no longer see changes tracked automatically.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {module:api/EditDocumentApi~editDocumentDocxDisableTrackChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editDocumentDocxDisableTrackChanges = function(inputFile, callback) {
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling editDocumentDocxDisableTrackChanges");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/docx/track-changes/disable', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxEnableTrackChanges operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxEnableTrackChangesCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable track changes, revisions in a Word DOCX document
     * Enables tracking of changes and revisions in a Word DOCX document.  Users editing the document will see changes tracked automatically, with edits highlighted, and the ability to accept or reject changes made to the document.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {module:api/EditDocumentApi~editDocumentDocxEnableTrackChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editDocumentDocxEnableTrackChanges = function(inputFile, callback) {
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling editDocumentDocxEnableTrackChanges");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/docx/track-changes/enable', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxFindParagraph operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxFindParagraphCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FindDocxParagraphResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find matching paragraphs in a Word DOCX document
     * Returns the paragraphs defined in the Word Document (DOCX) format file that match the input criteria
     * @param {module:model/FindDocxParagraphRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxFindParagraphCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FindDocxParagraphResponse}
     */
    this.editDocumentDocxFindParagraph = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxFindParagraph");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = FindDocxParagraphResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/find/paragraph', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxGetComments operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxGetCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDocxCommentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get comments from a Word DOCX document as a flat list
     * Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).
     * @param {module:model/GetDocxGetCommentsRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxGetCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDocxCommentsResponse}
     */
    this.editDocumentDocxGetComments = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetComments");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetDocxCommentsResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/get-comments/flat-list', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxGetCommentsHierarchical operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxGetCommentsHierarchicalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDocxCommentsHierarchicalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get comments from a Word DOCX document hierarchically
     * Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.
     * @param {module:model/GetDocxGetCommentsHierarchicalRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxGetCommentsHierarchicalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDocxCommentsHierarchicalResponse}
     */
    this.editDocumentDocxGetCommentsHierarchical = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetCommentsHierarchical");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetDocxCommentsHierarchicalResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/get-comments/hierarchical', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxGetHeadersAndFooters operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxGetHeadersAndFootersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDocxHeadersAndFootersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get content of a footer from a Word DOCX document
     * Returns the footer content from a Word Document (DOCX) format file
     * @param {module:model/GetDocxHeadersAndFootersRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxGetHeadersAndFootersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDocxHeadersAndFootersResponse}
     */
    this.editDocumentDocxGetHeadersAndFooters = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetHeadersAndFooters");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetDocxHeadersAndFootersResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/get-headers-and-footers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxGetImages operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxGetImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDocxImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get images from a Word DOCX document
     * Returns the images defined in the Word Document (DOCX) format file
     * @param {module:model/GetDocxImagesRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxGetImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDocxImagesResponse}
     */
    this.editDocumentDocxGetImages = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetImages");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetDocxImagesResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/get-images', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxGetMacroInformation operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxGetMacroInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMacrosResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get macro information from a Word DOCX/DOCM document
     * Returns information about the Macros (e.g. VBA) defined in the Word Document
     * @param {File} inputFile Input file to perform the operation on.
     * @param {module:api/EditDocumentApi~editDocumentDocxGetMacroInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMacrosResponse}
     */
    this.editDocumentDocxGetMacroInformation = function(inputFile, callback) {
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling editDocumentDocxGetMacroInformation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetMacrosResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/get-macros', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxGetMetadataProperties operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxGetMetadataPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDocxMetadataPropertiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all metadata properties in Word DOCX document
     * Returns all the metadata properties in an Office Word Document (docx)
     * @param {File} inputFile Input file to perform the operation on.
     * @param {module:api/EditDocumentApi~editDocumentDocxGetMetadataPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDocxMetadataPropertiesResponse}
     */
    this.editDocumentDocxGetMetadataProperties = function(inputFile, callback) {
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling editDocumentDocxGetMetadataProperties");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetDocxMetadataPropertiesResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/get-metadata', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxGetSections operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxGetSectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDocxSectionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sections from a Word DOCX document
     * Returns the sections defined in the Word Document (DOCX) format file
     * @param {module:model/GetDocxSectionsRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxGetSectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDocxSectionsResponse}
     */
    this.editDocumentDocxGetSections = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetSections");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetDocxSectionsResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/get-sections', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxGetStyles operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxGetStylesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDocxStylesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get styles from a Word DOCX document
     * Returns the styles defined in the Word Document (DOCX) format file
     * @param {module:model/GetDocxStylesRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxGetStylesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDocxStylesResponse}
     */
    this.editDocumentDocxGetStyles = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetStyles");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetDocxStylesResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/get-styles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxGetTableByIndex operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxGetTableByIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDocxTableByIndexResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific table by index in a Word DOCX document
     * Returns the specific table object by its 0-based index in an Office Word Document (DOCX)
     * @param {module:model/GetDocxTableByIndexRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxGetTableByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDocxTableByIndexResponse}
     */
    this.editDocumentDocxGetTableByIndex = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetTableByIndex");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetDocxTableByIndexResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/get-table/by-index', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxGetTableRow operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxGetTableRowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDocxTableRowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the contents of an existing table row in an existing table in a Word DOCX document
     * Gets the contents of an existing table row in a Word DOCX Document and returns the result.
     * @param {module:model/GetDocxTableRowRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxGetTableRowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDocxTableRowResponse}
     */
    this.editDocumentDocxGetTableRow = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetTableRow");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetDocxTableRowResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/get-table-row', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxGetTables operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxGetTablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDocxTablesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all tables in Word DOCX document
     * Returns all the table objects in an Office Word Document (docx)
     * @param {module:model/GetDocxTablesRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxGetTablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDocxTablesResponse}
     */
    this.editDocumentDocxGetTables = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxGetTables");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetDocxTablesResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/get-tables', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxInsertCommentOnParagraph operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxInsertCommentOnParagraphCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InsertDocxCommentOnParagraphResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a new comment into a Word DOCX document attached to a paragraph
     * Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param {module:model/DocxInsertCommentOnParagraphRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxInsertCommentOnParagraphCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InsertDocxCommentOnParagraphResponse}
     */
    this.editDocumentDocxInsertCommentOnParagraph = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxInsertCommentOnParagraph");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = InsertDocxCommentOnParagraphResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/insert-comment/on/paragraph', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxInsertImage operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxInsertImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocxInsertImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert image into a Word DOCX document
     * Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param {module:model/DocxInsertImageRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxInsertImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocxInsertImageResponse}
     */
    this.editDocumentDocxInsertImage = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxInsertImage");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DocxInsertImageResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/insert-image', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxInsertParagraph operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxInsertParagraphCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InsertDocxInsertParagraphResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a new paragraph into a Word DOCX document
     * Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.
     * @param {module:model/InsertDocxInsertParagraphRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxInsertParagraphCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InsertDocxInsertParagraphResponse}
     */
    this.editDocumentDocxInsertParagraph = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxInsertParagraph");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = InsertDocxInsertParagraphResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/insert-paragraph', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxInsertTable operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxInsertTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InsertDocxTablesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a new table into a Word DOCX document
     * Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param {module:model/InsertDocxTablesRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxInsertTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InsertDocxTablesResponse}
     */
    this.editDocumentDocxInsertTable = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxInsertTable");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = InsertDocxTablesResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/insert-table', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxInsertTableRow operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxInsertTableRowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InsertDocxTableRowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a new row into an existing table in a Word DOCX document
     * Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param {module:model/InsertDocxTableRowRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxInsertTableRowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InsertDocxTableRowResponse}
     */
    this.editDocumentDocxInsertTableRow = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxInsertTableRow");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = InsertDocxTableRowResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/insert-table-row', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxPages operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxPagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDocxPagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pages and content from a Word DOCX document
     * Returns the pages and contents of each page defined in the Word Document (DOCX) format file
     * @param {module:model/GetDocxPagesRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxPagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDocxPagesResponse}
     */
    this.editDocumentDocxPages = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxPages");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetDocxPagesResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/get-pages', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxRemoveAllComments operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxRemoveAllCommentsCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove all comments from a Word DOCX document
     * Removes all of the comments from a Word Document.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {module:api/EditDocumentApi~editDocumentDocxRemoveAllCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editDocumentDocxRemoveAllComments = function(inputFile, callback) {
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling editDocumentDocxRemoveAllComments");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/docx/comments/remove-all', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxRemoveHeadersAndFooters operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxRemoveHeadersAndFootersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveDocxHeadersAndFootersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove headers and footers from Word DOCX document
     * Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param {module:model/RemoveDocxHeadersAndFootersRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxRemoveHeadersAndFootersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveDocxHeadersAndFootersResponse}
     */
    this.editDocumentDocxRemoveHeadersAndFooters = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxRemoveHeadersAndFooters");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RemoveDocxHeadersAndFootersResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/remove-headers-and-footers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxRemoveObject operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxRemoveObjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocxRemoveObjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete any object in a Word DOCX document
     * Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.
     * @param {module:model/DocxRemoveObjectRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxRemoveObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocxRemoveObjectResponse}
     */
    this.editDocumentDocxRemoveObject = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxRemoveObject");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DocxRemoveObjectResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/remove-object', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxReplace operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxReplaceCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace string in Word DOCX document
     * Replace all instances of a string in an Office Word Document (docx)
     * @param {module:model/ReplaceStringRequest} reqConfig Document string replacement configuration input
     * @param {module:api/EditDocumentApi~editDocumentDocxReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editDocumentDocxReplace = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxReplace");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/docx/replace-all', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxReplaceMulti operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxReplaceMultiCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace multiple strings in Word DOCX document
     * Replace all instances of multiple strings in an Office Word Document (docx)
     * @param {module:model/MultiReplaceStringRequest} reqConfig Document string replacement configuration input
     * @param {module:api/EditDocumentApi~editDocumentDocxReplaceMultiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editDocumentDocxReplaceMulti = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxReplaceMulti");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/docx/replace-all/multi', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxReplaceParagraph operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxReplaceParagraphCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplaceDocxParagraphResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace matching paragraphs in a Word DOCX document
     * Returns the edited Word Document (DOCX) format file with the matching paragraphs replaced as requested.  Replace a paragraph with another object such as an image.  Useful for performing templating operations.
     * @param {module:model/ReplaceDocxParagraphRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxReplaceParagraphCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplaceDocxParagraphResponse}
     */
    this.editDocumentDocxReplaceParagraph = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxReplaceParagraph");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ReplaceDocxParagraphResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/replace/paragraph', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxSetCustomMetadataProperties operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxSetCustomMetadataPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set custom property metadata properties in Word DOCX document
     * Sets the custom property metadata for the metadata properties in an Office Word Document (docx)
     * @param {module:model/DocxSetCustomMetadataPropertiesRequest} input 
     * @param {module:api/EditDocumentApi~editDocumentDocxSetCustomMetadataPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editDocumentDocxSetCustomMetadataProperties = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentDocxSetCustomMetadataProperties");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/docx/set-metadata/custom-property', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxSetFooter operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxSetFooterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocxSetFooterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the footer in a Word DOCX document
     * Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param {module:model/DocxSetFooterRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxSetFooterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocxSetFooterResponse}
     */
    this.editDocumentDocxSetFooter = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxSetFooter");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DocxSetFooterResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/set-footer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxSetFooterAddPageNumber operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxSetFooterAddPageNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocxSetFooterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add page number to footer in a Word DOCX document
     * Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.
     * @param {module:model/DocxSetFooterAddPageNumberRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxSetFooterAddPageNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocxSetFooterResponse}
     */
    this.editDocumentDocxSetFooterAddPageNumber = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxSetFooterAddPageNumber");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DocxSetFooterResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/set-footer/add-page-number', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxSetHeader operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxSetHeaderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocxSetHeaderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the header in a Word DOCX document
     * Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
     * @param {module:model/DocxSetHeaderRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxSetHeaderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocxSetHeaderResponse}
     */
    this.editDocumentDocxSetHeader = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxSetHeader");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DocxSetHeaderResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/set-header', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxUpdateTableCell operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxUpdateTableCellCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDocxTableCellResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update, set contents of a table cell in an existing table in a Word DOCX document
     * Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param {module:model/UpdateDocxTableCellRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxUpdateTableCellCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDocxTableCellResponse}
     */
    this.editDocumentDocxUpdateTableCell = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxUpdateTableCell");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UpdateDocxTableCellResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/update-table-cell', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentDocxUpdateTableRow operation.
     * @callback module:api/EditDocumentApi~editDocumentDocxUpdateTableRowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDocxTableRowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update, set contents of a table row in an existing table in a Word DOCX document
     * Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
     * @param {module:model/UpdateDocxTableRowRequest} reqConfig Document input request
     * @param {module:api/EditDocumentApi~editDocumentDocxUpdateTableRowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDocxTableRowResponse}
     */
    this.editDocumentDocxUpdateTableRow = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentDocxUpdateTableRow");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UpdateDocxTableRowResponse;

      return this.apiClient.callApi(
        '/convert/edit/docx/update-table-row', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentFinishEditing operation.
     * @callback module:api/EditDocumentApi~editDocumentFinishEditingCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finish editing document, and download result from document editing
     * Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
     * @param {module:model/FinishEditingRequest} reqConfig Cloudmersive Document URL to complete editing on
     * @param {module:api/EditDocumentApi~editDocumentFinishEditingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editDocumentFinishEditing = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentFinishEditing");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/finish-editing', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentPptxDeleteSlides operation.
     * @callback module:api/EditDocumentApi~editDocumentPptxDeleteSlidesCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete, remove slides from a PowerPoint PPTX presentation document
     * Edits the input PowerPoint PPTX presentation document to remove the specified slides
     * @param {module:model/RemovePptxSlidesRequest} reqConfig Presentation input request
     * @param {module:api/EditDocumentApi~editDocumentPptxDeleteSlidesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editDocumentPptxDeleteSlides = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentPptxDeleteSlides");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/pptx/delete-slides', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentPptxGetMacroInformation operation.
     * @callback module:api/EditDocumentApi~editDocumentPptxGetMacroInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMacrosResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get macro information from a PowerPoint PPTX/PPTM presentation document
     * Returns information about the Macros (e.g. VBA) defined in the PowerPoint Document
     * @param {File} inputFile Input file to perform the operation on.
     * @param {module:api/EditDocumentApi~editDocumentPptxGetMacroInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMacrosResponse}
     */
    this.editDocumentPptxGetMacroInformation = function(inputFile, callback) {
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling editDocumentPptxGetMacroInformation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetMacrosResponse;

      return this.apiClient.callApi(
        '/convert/edit/pptx/get-macros', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentPptxReplace operation.
     * @callback module:api/EditDocumentApi~editDocumentPptxReplaceCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace string in PowerPoint PPTX presentation
     * Replace all instances of a string in an Office PowerPoint Document (pptx)
     * @param {module:model/ReplaceStringRequest} reqConfig Replacement document configuration input
     * @param {module:api/EditDocumentApi~editDocumentPptxReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editDocumentPptxReplace = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentPptxReplace");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/pptx/replace-all', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxAppendRow operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxAppendRowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendXlsxRowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Append row to a Excel XLSX spreadsheet, worksheet
     * Appends a row to the end of an Excel Spreadsheet worksheet.
     * @param {module:model/AppendXlsxRowRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxAppendRowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendXlsxRowResponse}
     */
    this.editDocumentXlsxAppendRow = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxAppendRow");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = AppendXlsxRowResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/append-row', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxClearCellByIndex operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxClearCellByIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClearXlsxCellResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear cell contents in an Excel XLSX spreadsheet, worksheet by index
     * Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
     * @param {module:model/ClearXlsxCellRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxClearCellByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClearXlsxCellResponse}
     */
    this.editDocumentXlsxClearCellByIndex = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxClearCellByIndex");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ClearXlsxCellResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/clear-cell/by-index', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxClearRow operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxClearRowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClearXlsxRowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear row from a Excel XLSX spreadsheet, worksheet
     * Clears data from a specific row in the Excel Spreadsheet worksheet, leaving a blank row. Use the Get Rows And Cells API to enumerate available rows in a spreadsheet.
     * @param {module:model/ClearXlsxRowRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxClearRowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClearXlsxRowResponse}
     */
    this.editDocumentXlsxClearRow = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxClearRow");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ClearXlsxRowResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/clear-row', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxCreateBlankSpreadsheet operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxCreateBlankSpreadsheetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBlankSpreadsheetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a blank Excel XLSX spreadsheet
     * Returns a blank Excel XLSX Spreadsheet (XLSX) format file
     * @param {module:model/CreateBlankSpreadsheetRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxCreateBlankSpreadsheetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBlankSpreadsheetResponse}
     */
    this.editDocumentXlsxCreateBlankSpreadsheet = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxCreateBlankSpreadsheet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CreateBlankSpreadsheetResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/create/blank', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxCreateSpreadsheetFromData operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxCreateSpreadsheetFromDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSpreadsheetFromDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Excel XLSX spreadsheet from column and row data
     * Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input
     * @param {module:model/CreateSpreadsheetFromDataRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxCreateSpreadsheetFromDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSpreadsheetFromDataResponse}
     */
    this.editDocumentXlsxCreateSpreadsheetFromData = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxCreateSpreadsheetFromData");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CreateSpreadsheetFromDataResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/create/from/data', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxDeleteWorksheet operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxDeleteWorksheetCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete, remove worksheet from an Excel XLSX spreadsheet document
     * Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
     * @param {module:model/RemoveXlsxWorksheetRequest} reqConfig Spreadsheet input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxDeleteWorksheetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editDocumentXlsxDeleteWorksheet = function(reqConfig, callback) {
      var postBody = reqConfig;

      // verify the required parameter 'reqConfig' is set
      if (reqConfig === undefined || reqConfig === null) {
        throw new Error("Missing the required parameter 'reqConfig' when calling editDocumentXlsxDeleteWorksheet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/xlsx/delete-worksheet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxDisableSharedWorkbook operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxDisableSharedWorkbookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisableSharedWorkbookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable Shared Workbook (legacy) in Excel XLSX spreadsheet
     * Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
     * @param {module:model/DisableSharedWorkbookRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxDisableSharedWorkbookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisableSharedWorkbookResponse}
     */
    this.editDocumentXlsxDisableSharedWorkbook = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxDisableSharedWorkbook");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DisableSharedWorkbookResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/configuration/disable-shared-workbook', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxEnableSharedWorkbook operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxEnableSharedWorkbookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnableSharedWorkbookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable Shared Workbook (legacy) in Excel XLSX spreadsheet
     * Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
     * @param {module:model/EnableSharedWorkbookRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxEnableSharedWorkbookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnableSharedWorkbookResponse}
     */
    this.editDocumentXlsxEnableSharedWorkbook = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxEnableSharedWorkbook");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = EnableSharedWorkbookResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/configuration/enable-shared-workbook', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxGetCellByIdentifier operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxGetCellByIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetXlsxCellByIdentifierResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier
     * Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet
     * @param {module:model/GetXlsxCellByIdentifierRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxGetCellByIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetXlsxCellByIdentifierResponse}
     */
    this.editDocumentXlsxGetCellByIdentifier = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxGetCellByIdentifier");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetXlsxCellByIdentifierResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/get-cell/by-identifier', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxGetCellByIndex operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxGetCellByIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetXlsxCellResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cell from an Excel XLSX spreadsheet, worksheet by index
     * Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet
     * @param {module:model/GetXlsxCellRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxGetCellByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetXlsxCellResponse}
     */
    this.editDocumentXlsxGetCellByIndex = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxGetCellByIndex");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetXlsxCellResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/get-cell/by-index', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxGetColumns operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxGetColumnsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetXlsxColumnsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get columns from a Excel XLSX spreadsheet, worksheet
     * Returns the columns defined in the Excel Spreadsheet worksheet
     * @param {module:model/GetXlsxColumnsRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxGetColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetXlsxColumnsResponse}
     */
    this.editDocumentXlsxGetColumns = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxGetColumns");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetXlsxColumnsResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/get-columns', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxGetImages operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxGetImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetXlsxImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get images from a Excel XLSX spreadsheet, worksheet
     * Returns the images defined in the Excel Spreadsheet worksheet
     * @param {module:model/GetXlsxImagesRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxGetImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetXlsxImagesResponse}
     */
    this.editDocumentXlsxGetImages = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxGetImages");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetXlsxImagesResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/get-images', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxGetMacroInformation operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxGetMacroInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMacrosResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get macro information from a Excel XLSX/XLSM spreadsheet, worksheet
     * Returns information about the Macros (e.g. VBA) defined in the Excel Spreadsheet
     * @param {File} inputFile Input file to perform the operation on.
     * @param {module:api/EditDocumentApi~editDocumentXlsxGetMacroInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMacrosResponse}
     */
    this.editDocumentXlsxGetMacroInformation = function(inputFile, callback) {
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling editDocumentXlsxGetMacroInformation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetMacrosResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/get-macros', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxGetRowsAndCells operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxGetRowsAndCellsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetXlsxRowsAndCellsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get rows and cells from a Excel XLSX spreadsheet, worksheet
     * Returns the rows and cells defined in the Excel Spreadsheet worksheet
     * @param {module:model/GetXlsxRowsAndCellsRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxGetRowsAndCellsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetXlsxRowsAndCellsResponse}
     */
    this.editDocumentXlsxGetRowsAndCells = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxGetRowsAndCells");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetXlsxRowsAndCellsResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/get-rows-and-cells', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxGetSpecificRow operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxGetSpecificRowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetXlsxSpecificRowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific row from a Excel XLSX spreadsheet, worksheet by path
     * Returns the specific row and its cells defined in the Excel Spreadsheet worksheet based on the specified path.
     * @param {module:model/GetXlsxSpecificRowRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxGetSpecificRowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetXlsxSpecificRowResponse}
     */
    this.editDocumentXlsxGetSpecificRow = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxGetSpecificRow");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetXlsxSpecificRowResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/get-specific-row', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxGetStyles operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxGetStylesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetXlsxStylesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get styles from a Excel XLSX spreadsheet, worksheet
     * Returns the style defined in the Excel Spreadsheet
     * @param {module:model/GetXlsxStylesRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxGetStylesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetXlsxStylesResponse}
     */
    this.editDocumentXlsxGetStyles = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxGetStyles");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetXlsxStylesResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/get-styles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxGetWorksheets operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxGetWorksheetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetXlsxWorksheetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get worksheets from a Excel XLSX spreadsheet
     * Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file
     * @param {module:model/GetXlsxWorksheetsRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxGetWorksheetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetXlsxWorksheetsResponse}
     */
    this.editDocumentXlsxGetWorksheets = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxGetWorksheets");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetXlsxWorksheetsResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/get-worksheets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxInsertWorksheet operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxInsertWorksheetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InsertXlsxWorksheetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a new worksheet into an Excel XLSX spreadsheet
     * Inserts a new worksheet into an Excel Spreadsheet
     * @param {module:model/InsertXlsxWorksheetRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxInsertWorksheetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InsertXlsxWorksheetResponse}
     */
    this.editDocumentXlsxInsertWorksheet = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxInsertWorksheet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = InsertXlsxWorksheetResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/insert-worksheet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxRenameWorksheet operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxRenameWorksheetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RenameXlsxWorksheetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename a specific worksheet in a Excel XLSX spreadsheet
     * Edits the input Excel XLSX spreadsheet document to rename a specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
     * @param {module:model/RenameXlsxWorksheetRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxRenameWorksheetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RenameXlsxWorksheetResponse}
     */
    this.editDocumentXlsxRenameWorksheet = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxRenameWorksheet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RenameXlsxWorksheetResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/rename-worksheet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxSetCellByIdentifier operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxSetCellByIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetXlsxCellByIdentifierResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier
     * Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet
     * @param {module:model/SetXlsxCellByIdentifierRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxSetCellByIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetXlsxCellByIdentifierResponse}
     */
    this.editDocumentXlsxSetCellByIdentifier = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxSetCellByIdentifier");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SetXlsxCellByIdentifierResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/set-cell/by-identifier', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDocumentXlsxSetCellByIndex operation.
     * @callback module:api/EditDocumentApi~editDocumentXlsxSetCellByIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetXlsxCellResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index
     * Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
     * @param {module:model/SetXlsxCellRequest} input Document input request
     * @param {module:api/EditDocumentApi~editDocumentXlsxSetCellByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetXlsxCellResponse}
     */
    this.editDocumentXlsxSetCellByIndex = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling editDocumentXlsxSetCellByIndex");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SetXlsxCellResponse;

      return this.apiClient.callApi(
        '/convert/edit/xlsx/set-cell/by-index', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
