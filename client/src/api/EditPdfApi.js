/**
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveConvertApiClient) {
      root.CloudmersiveConvertApiClient = {};
    }
    root.CloudmersiveConvertApiClient.EditPdfApi = factory(root.CloudmersiveConvertApiClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * EditPdf service.
   * @module api/EditPdfApi
   * @version 2.1.6
   */

  /**
   * Constructs a new EditPdfApi. 
   * @alias module:api/EditPdfApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the editPdfEncrypt operation.
     * @callback module:api/EditPdfApi~editPdfEncryptCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Encrypt and password-protect a PDF
     * Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
     * @param {File} inputFile Input file to perform the operation on.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userPassword Password of a user (reader) of the PDF file
     * @param {String} opts.ownerPassword Password of a owner (creator/editor) of the PDF file
     * @param {module:api/EditPdfApi~editPdfEncryptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editPdfEncrypt = function(inputFile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling editPdfEncrypt");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'userPassword': opts['userPassword'],
        'ownerPassword': opts['ownerPassword']
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/pdf/encrypt', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editPdfSetPermissions operation.
     * @callback module:api/EditPdfApi~editPdfSetPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Encrypt, password-protect and set restricted permissions on a PDF
     * Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).
     * @param {String} ownerPassword Password of a owner (creator/editor) of the PDF file (required)
     * @param {File} inputFile Input file to perform the operation on.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userPassword Password of a user (reader) of the PDF file (optional)
     * @param {Boolean} opts.allowPrinting Set to false to disable printing through DRM.  Default is true.
     * @param {Boolean} opts.allowDocumentAssembly Set to false to disable document assembly through DRM.  Default is true.
     * @param {Boolean} opts.allowContentExtraction Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true.
     * @param {Boolean} opts.allowFormFilling Set to false to disable filling out form fields in the PDF through DRM.  Default is true.
     * @param {Boolean} opts.allowEditing Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true.
     * @param {Boolean} opts.allowAnnotations Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true.
     * @param {Boolean} opts.allowDegradedPrinting Set to false to disable degraded printing of the PDF through DRM.  Default is true.
     * @param {module:api/EditPdfApi~editPdfSetPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editPdfSetPermissions = function(ownerPassword, inputFile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'ownerPassword' is set
      if (ownerPassword === undefined || ownerPassword === null) {
        throw new Error("Missing the required parameter 'ownerPassword' when calling editPdfSetPermissions");
      }

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling editPdfSetPermissions");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'ownerPassword': ownerPassword,
        'userPassword': opts['userPassword'],
        'allowPrinting': opts['allowPrinting'],
        'allowDocumentAssembly': opts['allowDocumentAssembly'],
        'allowContentExtraction': opts['allowContentExtraction'],
        'allowFormFilling': opts['allowFormFilling'],
        'allowEditing': opts['allowEditing'],
        'allowAnnotations': opts['allowAnnotations'],
        'allowDegradedPrinting': opts['allowDegradedPrinting']
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/pdf/encrypt/set-permissions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editPdfWatermarkText operation.
     * @callback module:api/EditPdfApi~editPdfWatermarkTextCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a text watermark to a PDF
     * Adds a text watermark to a PDF
     * @param {String} watermarkText Watermark text to add to the PDF (required)
     * @param {File} inputFile Input file to perform the operation on.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fontName Font Family Name for the watermark text; default is Times New Roman
     * @param {Number} opts.fontSize Font Size in points of the text; default is 150
     * @param {String} opts.fontColor Font color in hexadecimal or HTML color name; default is Red
     * @param {Number} opts.fontTransparency Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5
     * @param {module:api/EditPdfApi~editPdfWatermarkTextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editPdfWatermarkText = function(watermarkText, inputFile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'watermarkText' is set
      if (watermarkText === undefined || watermarkText === null) {
        throw new Error("Missing the required parameter 'watermarkText' when calling editPdfWatermarkText");
      }

      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling editPdfWatermarkText");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'watermarkText': watermarkText,
        'fontName': opts['fontName'],
        'fontSize': opts['fontSize'],
        'fontColor': opts['fontColor'],
        'fontTransparency': opts['fontTransparency']
      };
      var formParams = {
        'inputFile': inputFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/pdf/watermark/text', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
