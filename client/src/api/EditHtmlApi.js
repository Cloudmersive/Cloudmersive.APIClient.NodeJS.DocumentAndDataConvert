/**
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/HtmlGetLinksResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/HtmlGetLinksResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveConvertApiClient) {
      root.CloudmersiveConvertApiClient = {};
    }
    root.CloudmersiveConvertApiClient.EditHtmlApi = factory(root.CloudmersiveConvertApiClient.ApiClient, root.CloudmersiveConvertApiClient.HtmlGetLinksResponse);
  }
}(this, function(ApiClient, HtmlGetLinksResponse) {
  'use strict';

  /**
   * EditHtml service.
   * @module api/EditHtmlApi
   * @version 2.6.5
   */

  /**
   * Constructs a new EditHtmlApi. 
   * @alias module:api/EditHtmlApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the editHtmlHtmlAppendHeading operation.
     * @callback module:api/EditHtmlApi~editHtmlHtmlAppendHeadingCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Append a Heading to an HTML Document
     * Appends a heading to the end of an HTML document.
     * @param {String} headingText The text content to be used in the header.
     * @param {Object} opts Optional parameters
     * @param {File} opts.inputFile Optional: Input file to perform the operation on.
     * @param {String} opts.inputFileUrl Optional: URL of a file to operate on as input.
     * @param {Number} opts.headingSize Optional: The heading size number. Default is 1. Accepts values between 1 and 6.
     * @param {String} opts.cssStyle Optional: The CSS style for the heading.
     * @param {module:api/EditHtmlApi~editHtmlHtmlAppendHeadingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editHtmlHtmlAppendHeading = function(headingText, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'headingText' is set
      if (headingText === undefined || headingText === null) {
        throw new Error("Missing the required parameter 'headingText' when calling editHtmlHtmlAppendHeading");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'inputFileUrl': opts['inputFileUrl'],
        'headingText': headingText,
        'headingSize': opts['headingSize'],
        'cssStyle': opts['cssStyle']
      };
      var formParams = {
        'inputFile': opts['inputFile']
      };

      var authNames = ['Apikey'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/html/append/heading', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editHtmlHtmlAppendImageFromUrl operation.
     * @callback module:api/EditHtmlApi~editHtmlHtmlAppendImageFromUrlCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Append an Image to an HTML Document from a URL
     * Appends an image to the end of an HTML document using a URL.
     * @param {String} imageUrl The URL for the image.
     * @param {Object} opts Optional parameters
     * @param {File} opts.inputFile Optional: Input file to perform the operation on.
     * @param {String} opts.inputFileUrl Optional: URL of a file to operate on as input.
     * @param {String} opts.cssStyle Optional: CSS style for the image.
     * @param {module:api/EditHtmlApi~editHtmlHtmlAppendImageFromUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editHtmlHtmlAppendImageFromUrl = function(imageUrl, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling editHtmlHtmlAppendImageFromUrl");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'inputFileUrl': opts['inputFileUrl'],
        'imageUrl': imageUrl,
        'cssStyle': opts['cssStyle']
      };
      var formParams = {
        'inputFile': opts['inputFile']
      };

      var authNames = ['Apikey'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/html/append/image/from-url', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editHtmlHtmlAppendImageInline operation.
     * @callback module:api/EditHtmlApi~editHtmlHtmlAppendImageInlineCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Append a Base64 Inline Image to an HTML Document
     * Appends a base64 inline image to the end of an HTML document from an input file or URL.
     * @param {Object} opts Optional parameters
     * @param {File} opts.inputFile Optional: Input file to perform the operation on.
     * @param {String} opts.inputFileUrl Optional: URL of a file to operate on as input.
     * @param {File} opts.imageFile Optional: Image file to be appended as base64 inline image.
     * @param {String} opts.imageUrl Optional: Image URL to be appended as base64 inline image.
     * @param {String} opts.cssStyle Optional: CSS style for the image.
     * @param {String} opts.imageExtension Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading an imageFile directly, instead of using imageUrl. If no extension can be determined, will default to JPG.
     * @param {module:api/EditHtmlApi~editHtmlHtmlAppendImageInlineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editHtmlHtmlAppendImageInline = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'inputFileUrl': opts['inputFileUrl'],
        'imageUrl': opts['imageUrl'],
        'cssStyle': opts['cssStyle'],
        'imageExtension': opts['imageExtension']
      };
      var formParams = {
        'inputFile': opts['inputFile'],
        'imageFile': opts['imageFile']
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/html/append/image/inline', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editHtmlHtmlAppendParagraph operation.
     * @callback module:api/EditHtmlApi~editHtmlHtmlAppendParagraphCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Append a Paragraph to an HTML Document
     * Appends a paragraph to the end of an HTML document.
     * @param {String} paragraphText The text content to be used in the paragraph.
     * @param {Object} opts Optional parameters
     * @param {File} opts.inputFile Optional: Input file to perform the operation on.
     * @param {String} opts.inputFileUrl Optional: URL of a file to operate on as input.
     * @param {String} opts.cssStyle Optional: The CSS style for the paragraph.
     * @param {module:api/EditHtmlApi~editHtmlHtmlAppendParagraphCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editHtmlHtmlAppendParagraph = function(paragraphText, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'paragraphText' is set
      if (paragraphText === undefined || paragraphText === null) {
        throw new Error("Missing the required parameter 'paragraphText' when calling editHtmlHtmlAppendParagraph");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'inputFileUrl': opts['inputFileUrl'],
        'paragraphText': paragraphText,
        'cssStyle': opts['cssStyle']
      };
      var formParams = {
        'inputFile': opts['inputFile']
      };

      var authNames = ['Apikey'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/html/append/paragraph', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editHtmlHtmlCreateBlankDocument operation.
     * @callback module:api/EditHtmlApi~editHtmlHtmlCreateBlankDocumentCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Blank HTML Document
     * Returns a blank HTML Document format file.  The file is blank, with no contents by default.  Use the optional input parameters to add various starting elements.  Use additional editing commands such as Append Header, Append Paragraph or Append Image from URL to populate the document.
     * @param {Object} opts Optional parameters
     * @param {String} opts.title Optional: The title of the HTML document
     * @param {String} opts.cssUrl Optional: A CSS style URL to be added to the document.
     * @param {String} opts.cssInline Optional: An inline CSS style to be added to the document.
     * @param {String} opts.javascriptUrl Optional: Javascript URL to be added to the document.
     * @param {String} opts.javascriptInline Optional: Inline Javascript to be added to the document.
     * @param {module:api/EditHtmlApi~editHtmlHtmlCreateBlankDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editHtmlHtmlCreateBlankDocument = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'title': opts['title'],
        'cssUrl': opts['cssUrl'],
        'cssInline': opts['cssInline'],
        'javascriptUrl': opts['javascriptUrl'],
        'javascriptInline': opts['javascriptInline']
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/convert/edit/html/create/blank', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editHtmlHtmlGetLinks operation.
     * @callback module:api/EditHtmlApi~editHtmlHtmlGetLinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HtmlGetLinksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract resolved link URLs from HTML File
     * Extracts the resolved link URLs, fully-qualified if possible, from an input HTML file.
     * @param {Object} opts Optional parameters
     * @param {File} opts.inputFile Optional: Input file to perform the operation on.
     * @param {String} opts.inputFileUrl Optional: URL of a file to operate on as input.
     * @param {String} opts.baseUrl Optional: Base URL of the page, such as https://mydomain.com
     * @param {module:api/EditHtmlApi~editHtmlHtmlGetLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HtmlGetLinksResponse}
     */
    this.editHtmlHtmlGetLinks = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'inputFileUrl': opts['inputFileUrl'],
        'baseUrl': opts['baseUrl']
      };
      var formParams = {
        'inputFile': opts['inputFile']
      };

      var authNames = ['Apikey'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = HtmlGetLinksResponse;

      return this.apiClient.callApi(
        '/convert/edit/html/extract/links', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
