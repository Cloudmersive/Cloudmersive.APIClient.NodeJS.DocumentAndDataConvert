/**
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudmersiveConvertApiClient);
  }
}(this, function(expect, CloudmersiveConvertApiClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudmersiveConvertApiClient.EditPdfApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EditPdfApi', function() {
    describe('editPdfAddAnnotations', function() {
      it('should call editPdfAddAnnotations successfully', function(done) {
        //uncomment below and update the code to test editPdfAddAnnotations
        //instance.editPdfAddAnnotations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfConvertToPdfA', function() {
      it('should call editPdfConvertToPdfA successfully', function(done) {
        //uncomment below and update the code to test editPdfConvertToPdfA
        //instance.editPdfConvertToPdfA(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfDecrypt', function() {
      it('should call editPdfDecrypt successfully', function(done) {
        //uncomment below and update the code to test editPdfDecrypt
        //instance.editPdfDecrypt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfDeletePages', function() {
      it('should call editPdfDeletePages successfully', function(done) {
        //uncomment below and update the code to test editPdfDeletePages
        //instance.editPdfDeletePages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfEncrypt', function() {
      it('should call editPdfEncrypt successfully', function(done) {
        //uncomment below and update the code to test editPdfEncrypt
        //instance.editPdfEncrypt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfGetAnnotations', function() {
      it('should call editPdfGetAnnotations successfully', function(done) {
        //uncomment below and update the code to test editPdfGetAnnotations
        //instance.editPdfGetAnnotations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfGetFormFields', function() {
      it('should call editPdfGetFormFields successfully', function(done) {
        //uncomment below and update the code to test editPdfGetFormFields
        //instance.editPdfGetFormFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfGetMetadata', function() {
      it('should call editPdfGetMetadata successfully', function(done) {
        //uncomment below and update the code to test editPdfGetMetadata
        //instance.editPdfGetMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfGetPdfTextByPages', function() {
      it('should call editPdfGetPdfTextByPages successfully', function(done) {
        //uncomment below and update the code to test editPdfGetPdfTextByPages
        //instance.editPdfGetPdfTextByPages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfInsertPages', function() {
      it('should call editPdfInsertPages successfully', function(done) {
        //uncomment below and update the code to test editPdfInsertPages
        //instance.editPdfInsertPages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfLinearize', function() {
      it('should call editPdfLinearize successfully', function(done) {
        //uncomment below and update the code to test editPdfLinearize
        //instance.editPdfLinearize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfRasterize', function() {
      it('should call editPdfRasterize successfully', function(done) {
        //uncomment below and update the code to test editPdfRasterize
        //instance.editPdfRasterize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfReduceFileSize', function() {
      it('should call editPdfReduceFileSize successfully', function(done) {
        //uncomment below and update the code to test editPdfReduceFileSize
        //instance.editPdfReduceFileSize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfRemoveAllAnnotations', function() {
      it('should call editPdfRemoveAllAnnotations successfully', function(done) {
        //uncomment below and update the code to test editPdfRemoveAllAnnotations
        //instance.editPdfRemoveAllAnnotations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfRemoveAnnotationItem', function() {
      it('should call editPdfRemoveAnnotationItem successfully', function(done) {
        //uncomment below and update the code to test editPdfRemoveAnnotationItem
        //instance.editPdfRemoveAnnotationItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfResize', function() {
      it('should call editPdfResize successfully', function(done) {
        //uncomment below and update the code to test editPdfResize
        //instance.editPdfResize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfRotateAllPages', function() {
      it('should call editPdfRotateAllPages successfully', function(done) {
        //uncomment below and update the code to test editPdfRotateAllPages
        //instance.editPdfRotateAllPages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfRotatePageRange', function() {
      it('should call editPdfRotatePageRange successfully', function(done) {
        //uncomment below and update the code to test editPdfRotatePageRange
        //instance.editPdfRotatePageRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfSetFormFields', function() {
      it('should call editPdfSetFormFields successfully', function(done) {
        //uncomment below and update the code to test editPdfSetFormFields
        //instance.editPdfSetFormFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfSetMetadata', function() {
      it('should call editPdfSetMetadata successfully', function(done) {
        //uncomment below and update the code to test editPdfSetMetadata
        //instance.editPdfSetMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfSetPermissions', function() {
      it('should call editPdfSetPermissions successfully', function(done) {
        //uncomment below and update the code to test editPdfSetPermissions
        //instance.editPdfSetPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editPdfWatermarkText', function() {
      it('should call editPdfWatermarkText successfully', function(done) {
        //uncomment below and update the code to test editPdfWatermarkText
        //instance.editPdfWatermarkText(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
