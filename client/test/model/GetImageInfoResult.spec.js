/**
 * convertapi
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudmersiveConvertApiClient);
  }
}(this, function(expect, CloudmersiveConvertApiClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetImageInfoResult', function() {
    it('should create an instance of GetImageInfoResult', function() {
      // uncomment below and update the code to test GetImageInfoResult
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be.a(CloudmersiveConvertApiClient.GetImageInfoResult);
    });

    it('should have the property successful (base name: "Successful")', function() {
      // uncomment below and update the code to test the property successful
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be();
    });

    it('should have the property colorSpace (base name: "ColorSpace")', function() {
      // uncomment below and update the code to test the property colorSpace
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be();
    });

    it('should have the property colorType (base name: "ColorType")', function() {
      // uncomment below and update the code to test the property colorType
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be();
    });

    it('should have the property width (base name: "Width")', function() {
      // uncomment below and update the code to test the property width
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be();
    });

    it('should have the property height (base name: "Height")', function() {
      // uncomment below and update the code to test the property height
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be();
    });

    it('should have the property compressionLevel (base name: "CompressionLevel")', function() {
      // uncomment below and update the code to test the property compressionLevel
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be();
    });

    it('should have the property imageHashSignature (base name: "ImageHashSignature")', function() {
      // uncomment below and update the code to test the property imageHashSignature
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be();
    });

    it('should have the property hasTransparency (base name: "HasTransparency")', function() {
      // uncomment below and update the code to test the property hasTransparency
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be();
    });

    it('should have the property mimeType (base name: "MimeType")', function() {
      // uncomment below and update the code to test the property mimeType
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be();
    });

    it('should have the property imageFormat (base name: "ImageFormat")', function() {
      // uncomment below and update the code to test the property imageFormat
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be();
    });

    it('should have the property dPIUnit (base name: "DPIUnit")', function() {
      // uncomment below and update the code to test the property dPIUnit
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be();
    });

    it('should have the property DPI (base name: "DPI")', function() {
      // uncomment below and update the code to test the property DPI
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be();
    });

    it('should have the property colorCount (base name: "ColorCount")', function() {
      // uncomment below and update the code to test the property colorCount
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be();
    });

    it('should have the property bitDepth (base name: "BitDepth")', function() {
      // uncomment below and update the code to test the property bitDepth
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be();
    });

    it('should have the property comment (base name: "Comment")', function() {
      // uncomment below and update the code to test the property comment
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be();
    });

    it('should have the property exifProfileName (base name: "ExifProfileName")', function() {
      // uncomment below and update the code to test the property exifProfileName
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be();
    });

    it('should have the property exifValues (base name: "ExifValues")', function() {
      // uncomment below and update the code to test the property exifValues
      //var instance = new CloudmersiveConvertApiClient.GetImageInfoResult();
      //expect(instance).to.be();
    });

  });

}));
